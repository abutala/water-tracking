[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "homely-vibes"
version = "2.0.0"
description = "Home automation and monitoring system"
authors = [{name = "Amit Butala", email = "abutala@deviationlabs.com"}]
readme = "README.md"
requires-python = ">=3.13,<4.0"
dependencies = [
    "requests>=2.31.0",
    "teslapy>=2.6.0",
    "openai>=1.0.0",
    "pandas>=2.2.0",
    "numpy>=1.24.0",
    "Pillow>=10.0.0",
    "python-dotenv>=0.19.0",
    "pydantic>=2.0.0",
    "openpyxl>=3.1.0",
    "fastapi>=0.100.0",
    "langchain>=0.2.5",
    "langchain-openai>=0.1.0",
    "tiktoken>=0.8.0",
    "urllib3==2.5.0",
    "uvicorn>=0.23.0",
    "cffi>=1.17.1",
    "geopy>=2.4.1",
    "requests-oauthlib>=2.0.0",
    "websocket-client>=1.8.0",
    "selenium>=4.35.0",
    "pywebview>=6.0",
    "pyfoscam (>=1.2,<2.0)",
    "matplotlib>=3.10.5",
]

[project.optional-dependencies]
streamlit = [
    "streamlit>=1.20.0",
]
iot = [
    "asyncio-mqtt>=0.11.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=24.3.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "isort>=5.10.0",
    "vulture>=2.0.0",
    "semgrep>=1.0.0",
    "codespell>=2.0.0",
    "deptry>=0.23.1",
]

[tool.hatch.build.targets.wheel]
packages = ["lib", "Tesla", "WaterParser", "Bimpop.ai"]

[tool.deptry]
known_first_party = [
    "Constants",
    "Mailer", 
    "MyPushover",
    "MyTwilio",
    "NetHelpers",
    "FoscamImager",
    "TFOneShot",
    "EmailMyIP",
    # Project-specific modules
    "rachio_client",
    "flume_client",
    "data_storage",
    "collector",
    "reporter",
    "logger",
    "PumpReport",
    "PumpStatsWriter", 
    "TuyaLogParser",
    "utils",  # for Bimpop.ai/fe/utils.py
]
# Ignore missing dependencies that are optional or environment-specific
[tool.deptry.per_rule_ignores]
DEP001 = [
    "aiy",
    "google_auth_oauthlib", 
    "pinecone",
    "langchain_pinecone",
    "streamlit",
    "tld",
    "tensorflow", 
    "keras",
    "tesla_api",
    "tesla_powerwall",
    "foscam",
    "matplotlib",
    "twilio",
    "paramiko",
    "cv2"
]
DEP002 = [
    # Dev tools that aren't imported directly
    "pytest-cov",
    "pytest-asyncio", 
    "pytest-mock",
    "black",
    "flake8",
    "mypy",
    "isort",
    "vulture",
    "semgrep",
    "codespell",
    "deptry",
    # Optional dependencies not used in all modules
    "teslapy",
    "Pillow",
    "python-dotenv",
    "openpyxl", 
    "urllib3",
    "cffi",
    "asyncio-mqtt"
]
DEP003 = ["google", "TeslaPy"]
exclude = ["tests", ".venv", "backups"]

[tool.pytest.ini_options]
testpaths = ["Tesla", "WaterParser", "Bimpop.ai"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.ruff.lint.per-file-ignores]
"*/test_*.py" = ["E402"]  # Allow imports after mocks in test files
"GarageCheck/transferlearn_on_imagenet.py" = ["E402"]  # Jupyter notebook style

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "Constants",
    "TeslaPy.*",
    "tesla_powerwall.*",
]
ignore_missing_imports = true
